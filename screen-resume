#!/bin/bash

__normalize_encoding() { iconv -f "$(file -b --mime-encoding "${1}")" "${1}"; }
__truncate_columns() { sed "s/\([^,]\{0,${1}\}\)[^,]*/\1/g"; }
__collapse_blank_lines() { sed '/^$/N;/^\n$/D'; }
__printopt() { printf " %s\t%s\n" "${1}" "${2}"; }
__printopt2() { printf "  %-10s : %s\n" "${1}" "${2}"; }
__usage() {
    printf "Usage: %s opts\n\n" "${0}"
n    printf "Options:\n"
    __printopt "-h" "print this help message."
    __printopt "-a" "Include attached sessions."
}

screen_peek() {
    cols="${2}"
    if test -z "${cols}"; then cols=80; fi
    __normalize_encoding "$1" \
        | __truncate_columns "${cols}" \
        | __collapse_blank_lines
}
__screen_resume() {
    pstags="${1}"
    terminal="${2}"

    pids=($(screen -ls | awk '/[0-9].*'${pstags}'/\
                 { split($1, x, "."); print x[1]";"$1 }'))

    count="${#pids[@]}"

    [[ "${count}" -eq 0 ]] && return 1

    printf "\nThere are (${pstags}) screens on:\n\n"

    arr=()

    for i in "${!pids[@]}"
    do
        OIFS=$IFS; IFS=";"

        x=(${pids[i]})
        arr[i]=${x[0]}

        IFS=$OIFS
        z=$(screen -ls | awk '/'${x}'/ { print $2 }')
        printf '  [%s] %-20s %s\n' $i ${x[1]} ${z}
    done

    idx=$(($count - 1))

    printf "\nOptions:\n"
    __printopt2 "0$(test $idx -gt 0 && echo "-${idx}")[p]" \
                "Number to resume. Append p to peek."
    __printopt2 "a" "to resume all"
    __printopt2 "enter" "to skip"
    printf "\nChoose: "

    read choice
    if [ ${#choice} -eq 0 ]; then
        return 1
    fi

    printf "\n"

    if [[ "$choice" = "a" ]]; then
        for i in "${!arr[@]}"
        do
            pid="${arr[$i]}"
            if [[ "$i" -eq "${#arr[@]}-1" ]]; then
                screen -r ${pid}
            else
                "$terminal" -e sh -c "screen -r ${pid}" &
            fi
        done
        return 0
    fi

    peek=
    if [ "${choice: -1}" == "p" ]; then
        peek=1
        choice=${choice%?}
    fi

    if [[ "$choice" =~ ^[0-9]+$ ]]; then

        pid="${arr[$choice]}"
        if [[ -n "${pid}"  ]]; then

            if [[ ! -z $peek ]]; then
                f=$(mktemp)
                screen -S "${pid}" -X hardcopy "${f}"
                screen_peek "${f}" | less
                rm -f ${f}
                return 2
            else
                screen -dr ${pid}
            fi

            return 0
        fi
    fi
    return 1

}
screen_resume() {
    terminal=$(which urxvt) #change to desired terminal
    optstring="ha"
    attached=0
    while getopts ${optstring} arg; do
        case ${arg} in
            h)
                __usage
                exit 0
                ;;
            a)
                attached=1
                ;;
            *)
                __usage
                exit 1
                ;;
        esac
    done

    pstags="Detached"

    if test "${attached}" -eq 1; then
        pstags="${pstags}|Attached"
    fi

    # not resumed, resumed, continue loop

    while :
    do
        printf "\033c"
        __screen_resume "${pstags}" "${terminal}"
        result=$?
        if test "${result}" -eq 2; then
            continue
        fi
        return "${result}"
    done

}

(return 0 2>/dev/null) || screen_resume $@

